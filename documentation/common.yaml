components:
  schemas:
    CommonFields:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        createdAt: '2021-12-07T00:00:00.000Z'
        updatedAt: '2021-12-07T00:00:00.000Z'

    Model:
      type: object
      properties:
        id:
          type: integer
          required: true
      example:
        id: 1

    Pagination:
      type: object
      properties:
        pagination:
          type: object
          properties:
            page:
              type: number
            pageSize:
              type: number
            pageCount:
              type: number
            total:
              type: number
      example:
        page: 1
        pageSize: 10
        pageCount: 10
        total: 100

    Error:
      type: object
      required:
        - error
      properties:
        data:
          type: integer
          nullable: true
        error:
          type: object
          properties:
            status:
              type: number
            name:
              type: string
            message:
              type: string

  parameters:
    recordId:
      name: id
      in: path
      description: The record ID
      required: true
      schema:
        type: integer
        minimum: 1

    paginationParam:
      name: pagination
      in: query
      description: Paginate records
      required: false
      style: deepObject
      schema:
        type: object
        properties:
          pagination:
            type: object
            anyOf:
              - properties:
                  page:
                    type: integer
              - properties:
                  pageSize:
                    type: integer
              - properties:
                  withCount:
                    type: boolean
      examples:
        page:
          summary: Indicates the number of page returned
          value:
            pagiantion:
              page: 1
        descSort:
          summary: Indicates the ammount of records returned by page
          value:
            pagination:
              pageSize: 10
        deepSort:
          summary: Count all records present in page
          value:
            pagination:
              withCount: true

    filterParam:
      name: filters
      in: query
      description: Filter records
      required: false
      style: deepObject
      schema:
        type: object
        properties:
          field:
            type: object
            anyOf:
              - properties:
                  $eq:
                    type: string
              - properties:
                  $ne:
                    type: string
              - properties:
                  $lt:
                    type: string
              - properties:
                  $lte:
                    type: string
              - properties:
                  $gt:
                    type: string
              - properties:
                  $gte:
                    type: string
              - properties:
                  $in:
                    type: string
              - properties:
                  $notIn:
                    type: string
              - properties:
                  $contains:
                    type: string
              - properties:
                  $notContains:
                    type: string
              - properties:
                  $containsi:
                    type: string
              - properties:
                  $notCountainsi:
                    type: string
              - properties:
                  $null:
                    type: string
              - properties:
                  $notNull:
                    type: string
              - properties:
                  $between:
                    type: string
              - properties:
                  $startsWith:
                    type: string
              - properties:
                  $endsWith:
                    type: string
      examples:
        equal:
          summary: Exact match records
          value:
            field:
              $eq: match
        notEqual:
          summary: Return records that are diferent to $ne value
          value:
            field:
              $ne: match
        lessThan:
          summary: Return records that are less than $lt value
          value:
            field:
              $lt: match

    sortParam:
      name: sort
      in: query
      description: Sort records by field and direction
      required: false
      schema:
        type: string
      examples:
        ascSort:
          summary: Sort records in ascending order
          value: field:asc
        descSort:
          summary: Sort records in descending order
          value: field:desc
        deepSort:
          summary: Sort records by relations fields
          value: relation.field:asc

    fieldParam:
      name: fields
      in: query
      description: Include only fields in response
      required: false
      schema:
        type: string
      examples:
        singleField:
          summary: Include only one field in response
          value: field
        multipleFields:
          summary: Include multiple fields in response
          value: field_1,field_2
        deepFields:
          summary: Include relations fields in response
          value: relation.field

    populateParam:
      name: populate
      in: query
      description: Include relations field in response
      required: false
      schema:
        type: string
      examples:
          firstLevel:
            summary: Fetch first-level relations
            value: relation
          nestedRelation:
            summary: Fetch deeper relations
            value: relation.deep

  responses:
    internalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            data: null
            error:
              status: 500
              name: InternalServerError
              message: Internal server error

    unauthorized:
      description: Unauthrized user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            data: null
            error:
              status: 401
              name: UnauthrizedError
              message: Missing or invalid credentials

    forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            data: null
            error:
              status: 403
              name: ForbiddenError
              message: Forbidden
